<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.alpharogroup</groupId>
		<artifactId>turbo-ninja</artifactId>
		<version>1.0.0</version>
	</parent>

	<artifactId>chat-systems</artifactId>
	<version>6.18.0</version>
	<packaging>pom</packaging>

	<name>${project.artifactId}</name>

	<modules>
		<module>wicket-chat-api</module>
		<module>wicket-channel-chat</module>
		<module>wicket-channel-chat-examples</module>
	</modules>

	<description>This project holds interfaces for the chat communication.
Inspired from the wicketstuff push project. Many interfaces are took from the wicketstuff push project.</description>

	<url>https://github.com/astrapi69/turbo-ninja</url>

	<scm>
		<connection>scm:git:git:@github.com:astrapi69/turbo-ninja.git</connection>
		<developerConnection>scm:git:git@github.com:astrapi69/turbo-ninja.git</developerConnection>
		<url>git:@github.com:astrapi69/turbo-ninja.git</url>
	</scm>

	<developers>

		<developer>
			<id>astrapi69</id>
			<name>Asterios Raptis</name>
			<email>astrapi69 at users.sf.net</email>
			<timezone>Berlin</timezone>
			<roles>
				<role>Project manager</role>
				<role>Developer</role>
			</roles>
		</developer>

	</developers>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- JETTY version -->
		<jetty9.version>9.2.10.v20150310</jetty9.version>
		<wicket-jetty9-runner.version>1.0.0</wicket-jetty9-runner.version>
		<!-- WICKET version -->
		<wicket.version>6.18.0</wicket.version>
		<wiquery-core.version>6.13.0</wiquery-core.version>
		<!-- JAULP versions -->
		<jaulp.core.version>3.10.0</jaulp.core.version>
		<jaulp.lang.version>${jaulp.core.version}</jaulp.lang.version>
		<!-- MAVEN PLUGIN versions -->
		<maven-compiler-plugin.version>3.2</maven-compiler-plugin.version>
		<maven-compiler-plugin.source.version>1.7</maven-compiler-plugin.source.version>
		<maven-compiler-plugin.target.version>1.7</maven-compiler-plugin.target.version>
		<maven-compiler-plugin.compilerVersion>1.7</maven-compiler-plugin.compilerVersion>
		<maven-compiler-plugin.encoding>UTF-8</maven-compiler-plugin.encoding>
		<maven-compiler-plugin.optimize>true</maven-compiler-plugin.optimize>
		<maven-compiler-plugin.showWarnings>true</maven-compiler-plugin.showWarnings>
		<maven-compiler-plugin.debug>true</maven-compiler-plugin.debug>
		<maven-javadoc-plugin.version>2.10.1</maven-javadoc-plugin.version>
		<maven-source-plugin.version>2.4</maven-source-plugin.version>
		<maven-gpg-plugin.version>1.5</maven-gpg-plugin.version>
		<maven-release-plugin.version>2.5.1</maven-release-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<nexus-staging-maven-plugin.version>1.6.3</nexus-staging-maven-plugin.version>
		<maven-assembly-plugin.version>2.5.3</maven-assembly-plugin.version>
		<maven-eclipse-plugin.version>2.9</maven-eclipse-plugin.version>
		<tomcat7-maven-plugin.version>2.2</tomcat7-maven-plugin.version>
		<!-- allowed values: R7, 1.0, 1.5, 2.0 or none -->
		<wtp.version>2.0</wtp.version>
		<maven-war-plugin.version>2.6</maven-war-plugin.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- JETTY 9 DEPENDENCIES FOR TESTING -->
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-server</artifactId>
				<version>${jetty9.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-webapp</artifactId>
				<version>${jetty9.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-util</artifactId>
				<version>${jetty9.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-jmx</artifactId>
				<version>${jetty9.version}</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-deploy</artifactId>
				<version>${jetty9.version}</version>
			</dependency>
			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>wicket-jetty9-runner</artifactId>
				<version>${wicket-jetty9-runner.version}</version>
			</dependency>
			<!-- WICKET DEPENDENCIES -->
			<dependency>
				<groupId>org.apache.wicket</groupId>
				<artifactId>wicket-core</artifactId>
				<version>${wicket.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.springframework</groupId>
						<artifactId>spring</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- WIQUERY DEPENDENCIES -->
			<dependency>
				<groupId>org.odlabs.wiquery</groupId>
				<artifactId>wiquery-core</artifactId>
				<version>${wiquery-core.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.apache.wicket</groupId>
						<artifactId>wicket</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>wicket-chat-api</artifactId>
				<version>${wicket.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>wicket-channel-chat</artifactId>
				<version>${wicket.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.wicket.annotated.header.contributors</artifactId>
				<version>${wicket.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.wicket.base</artifactId>
				<version>${wicket.version}</version>
			</dependency>

			<dependency>
				<groupId>de.alpharogroup</groupId>
				<artifactId>jaulp.lang</artifactId>
				<version>${jaulp.lang.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<resources>
			<resource>
				<filtering>false</filtering>
				<directory>src/main/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/webapp</directory>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</testResource>
		</testResources>

		<pluginManagement>

			<plugins>

				<plugin>
					<inherited>true</inherited>
					<!-- NOTE: We don't need a groupId specification because the group is 
						org.apache.maven.plugins ...which is assumed by default. -->
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${maven-compiler-plugin.source.version}</source>
						<target>${maven-compiler-plugin.target.version}</target>
						<compilerVersion>${maven-compiler-plugin.compilerVersion}</compilerVersion>
						<encoding>${maven-compiler-plugin.encoding}</encoding>
						<optimize>${maven-compiler-plugin.optimize}</optimize>
						<showWarnings>${maven-compiler-plugin.showWarnings}</showWarnings>
						<debug>${maven-compiler-plugin.debug}</debug>
					</configuration>
				</plugin>
				<!-- Configuring Maven Source Plugin: To attach source artifacts to your 
					build we execute the source:jar goal from the source plugin during the package 
					phase. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- Configuring Maven Javadoc Plugin: To attach javadoc artifacts to 
					your build we execute the javadoc:jar goal from the javadoc plugin. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<detectOfflineLinks>false</detectOfflineLinks>
						<minmemory>128m</minmemory>
						<maxmemory>256m</maxmemory>
						<notimestamp>true</notimestamp>
						<quiet>true</quiet>
						<links>
							<link>http://download.oracle.com/javase/1.5.0/docs/api</link>
							<link>http://download.oracle.com/javaee/5/api</link>
						</links>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadoc</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- Signing with gpg -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>${maven-gpg-plugin.version}</version>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven-release-plugin.version}</version>
					<configuration>
						<mavenExecutorId>forked-path</mavenExecutorId>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
				</plugin>
				<!-- The Nexus Staging Maven Plugin is the recommended way to deploy 
					your components to OSSRH and release them to the Central Repository. _______________ 
					If your version is a release version (does not end in -SNAPSHOT) and with 
					this setup in place, you can run a deployment to OSSRH and an automated release 
					to the Central Repository with the usual: mvn clean deploy _________________________ 
					With the property autoReleaseAfterClose set to false you can manually inspect 
					the staging repository in Nexus and trigger a release of the staging repository 
					later with: mvn nexus-staging:release. -->
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>${nexus-staging-maven-plugin.version}</version>
					<extensions>true</extensions>
					<configuration>
						<serverId>ossrh</serverId>
						<nexusUrl>https://oss.sonatype.org/</nexusUrl>
						<autoReleaseAfterClose>true</autoReleaseAfterClose>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin.version}</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<!-- this is used for inheritance merges -->
							<phase>package</phase>
							<!-- append to the packaging phase. -->
							<goals>
								<goal>attached</goal>
								<!-- goals == mojos -->
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>${jetty9.version}</version>
					<configuration>
						<systemProperties>
							<systemProperty>
								<name>maven.project.build.directory.test-classes</name>
								<value>${project.build.directory}/test-classes</value>
							</systemProperty>
						</systemProperties>
						<jettyXml>${project.basedir}/src/test/jetty/jetty.xml,${project.basedir}/src/test/jetty/jetty-ssl.xml,${project.basedir}/src/test/jetty/jetty-http.xml,${project.basedir}/src/test/jetty/jetty-https.xml</jettyXml>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>${tomcat7-maven-plugin.version}</version>
					<configuration>
						<path>/</path>
						<port>8180</port>
						<httpsPort>8443</httpsPort>
						<keystoreFile>${project.build.directory}/test-classes/keystore</keystoreFile>
						<keystorePass>wicket</keystorePass>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${maven-eclipse-plugin.version}</version>
					<configuration>
						<additionalBuildcommands>
							<buildcommand>org.eclipse.m2e.core.maven2Builder</buildcommand>
						</additionalBuildcommands>
						<additionalProjectnatures>
							<projectnature>org.eclipse.m2e.core.maven2Nature</projectnature>
							<projectnature>org.springsource.ide.eclipse.gradle.core.nature</projectnature>
						</additionalProjectnatures>
						<downloadSources>true</downloadSources>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>${maven-war-plugin.version}</version>
				</plugin>

			</plugins>

		</pluginManagement>

		<plugins>

			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-eclipse-plugin</artifactId>
			</plugin>

			<plugin>
				<inherited>true</inherited>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<inherited>true</inherited>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
			</plugin>

		</plugins>

	</build>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<name>Nexus snapshot Repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<name>Nexus snapshot Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<profiles>

		<profile>
			<id>oss.sonatype.org-staged-release</id>
			<!-- This is the profile to use for releasing into the staged release 
				repo. We need to sign the artifacts. -->
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>

				</plugins>
			</build>

			<distributionManagement>
				<snapshotRepository>
					<id>ossrh</id>
					<name>Nexus snapshot Repository</name>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
				</snapshotRepository>
				<repository>
					<id>ossrh</id>
					<name>Nexus snapshot Repository</name>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
			</distributionManagement>

		</profile>

	</profiles>

</project>
